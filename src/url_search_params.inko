import std.clone (Clone)
import std.cmp (Contains)
import std.int (Format)
import std.iter (Iter, Stream)
import std.string (StringBuffer, ToString)

let SPACE = 0x20
let PERCENT = 0x25
let PLUS = 0x2B
let HYPTHEN = 0x2D
let DOT = 0x2E
let UNDERSCORE = 0x5F
let ZERO = 0x30
let NINE = 0x39
let UPPER_A = 0x41
let UPPER_F = 0x46
let UPPER_Z = 0x5A
let LOWER_A = 0x61
let LOWER_F = 0x66
let LOWER_Z = 0x7A

class pub UrlSearchParams {
  let pub @entries: Array[(String, String)]

  fn pub static new -> UrlSearchParams {
    from_array([])
  }

  fn pub static from_array(
    entries: Array[(String, String)],
  ) -> UrlSearchParams {
    UrlSearchParams(entries)
  }

  fn pub static from_string(string: ref String) -> UrlSearchParams {
    let string = string.strip_prefix('?')

    let entries = string
      .split('&')
      .select_map(fn (pair) {
        match pair.byte_index('=', 0) {
          case Some(index) -> {
            let key = pair.slice(0, index).to_string
            let value = pair.slice(index + 1, pair.size - index - 1).to_string

            Option.Some((decode(key), decode(value)))
          }
          case None if pair.size > 0 -> Option.Some((decode(pair), ''))
          case None -> Option.None
        }
      })
      .to_array

    from_array(entries)
  }

  fn pub move into_array -> Array[(String, String)] {
    @entries
  }

  fn pub size -> Int {
    @entries.size
  }

  fn pub entries -> Stream[ref (String, String)] {
    @entries.iter
  }

  fn pub keys -> Stream[String] {
    @entries.iter.map(fn (e) { e.0 })
  }

  fn pub values -> Stream[String] {
    @entries.iter.map(fn (e) { e.1 })
  }

  fn pub has?(key: ref String, value: ref String) -> Bool {
    @entries.iter.any?(fn (e) { (e.0 == key) and (e.1 == value) })
  }

  fn pub has_key?(key: ref String) -> Bool {
    @entries.iter.any?(fn (e) { e.0 == key })
  }

  fn pub get(key: String) -> Option[String] {
    @entries.iter.find_map(fn (e) {
      if e.0 == key { Option.Some(e.1) } else { Option.None }
    })
  }

  fn pub get_all(key: String) -> Array[String] {
    @entries
      .iter
      .select_map(fn (e) {
        if e.0 == key { Option.Some(e.1) } else { Option.None }
      })
      .to_array
  }

  fn pub mut append(key: String, value: String) {
    @entries.push((key, value))
  }

  fn pub mut delete(key: ref String, value: ref String) {
    let entries = (@entries := [])

    @entries = entries
      .into_iter
      .select(fn (e) { (e.0 != key) or (e.1 != value) })
      .to_array
  }

  fn pub mut delete_by_key(key: ref String) {
    let entries = (@entries := [])

    @entries = entries.into_iter.select(fn (e) { e.0 != key }).to_array
  }

  fn pub mut set(key: String, value: String) {
    let entries = (@entries := [])
    let mut seen = false

    entries.push((key, value))

    @entries = entries
      .into_iter
      .select_map(fn move (e) {
        if e.0 == key {
          if seen {
            Option.None
          } else {
            seen = true
            Option.Some((key, value))
          }
        } else {
          Option.Some(e)
        }
      })
      .to_array
  }
}

impl Clone[UrlSearchParams] for UrlSearchParams {
  fn pub clone -> UrlSearchParams {
    UrlSearchParams(@entries.clone)
  }
}

impl Contains[String] for UrlSearchParams {
  fn pub contains?(value: ref String) -> Bool {
    has_key?(value)
  }
}

impl ToString for UrlSearchParams {
  fn pub to_string -> String {
    let iter = @entries.iter.map(fn (e) {
      let mut buf = StringBuffer.new

      buf.push(encode(e.0))
      buf.push('=')
      buf.push(encode(e.1))

      buf.to_string
    })

    String.join(iter, '&')
  }
}

fn decode(string: ref String) -> String {
  let bytes = string.to_byte_array
  let mut buf = ByteArray.new
  let mut i = 0

  while i < bytes.size {
    let b = bytes.get(i)

    if b == PERCENT {
      let mut code = 0

      if (i + 2) < bytes.size {
        let mut j = i + 1

        while j < (i + 3) {
          let b = bytes.get(j)

          if ZERO.to(NINE).contains?(b) {
            code = (code << 4) + (b - ZERO)
          } else if UPPER_A.to(UPPER_F).contains?(b) {
            code = (code << 4) + (b - UPPER_A + 10)
          } else if LOWER_A.to(LOWER_F).contains?(b) {
            code = (code << 4) + (b - LOWER_A + 10)
          } else {
            break
          }

          j += 1
        }

        if j == (i + 3) {
          buf.push(code)
          i = j

          next
        }
      }
    } else if b == PLUS {
      buf.push(SPACE)
      i += 1

      next
    }

    buf.push(b)
    i += 1
  }

  buf.to_string
}

fn encode(string: ref String) -> String {
  let mut buf = ByteArray.new

  string.bytes.each(fn (b) {
    if b == SPACE {
      buf.push(PLUS)
    } else if b == HYPTHEN or b == DOT or b == UNDERSCORE {
      buf.push(b)
    } else if
      ZERO.to(NINE).contains?(b)
        or UPPER_A.to(UPPER_Z).contains?(b)
        or LOWER_A.to(LOWER_Z).contains?(b)
    {
      buf.push(b)
    } else {
      buf.push(PERCENT)
      buf.append(b.format(Format.Hex).to_upper.to_byte_array)
    }
  })

  buf.to_string
}
